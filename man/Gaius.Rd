% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class.R
\name{Gaius}
\alias{Gaius}
\title{Gaius}
\description{
Gaius

Gaius
}
\examples{

## ------------------------------------------------
## Method `Gaius$define`
## ------------------------------------------------

Gaius$new()$define(baseColor = "blue")

## ------------------------------------------------
## Method `Gaius$change`
## ------------------------------------------------

Gaius$new()$change(sel_id("myButton"), color = "blue", fontSize = 50)

## ------------------------------------------------
## Method `Gaius$print_css`
## ------------------------------------------------

Gaius$new()$change(sel_id("myButton"), color = "blue")$print_css()

## ------------------------------------------------
## Method `Gaius$include`
## ------------------------------------------------

# generate CSS
css <- Gaius$
  new()$
  define(grey = '#c4c4c4')$
  change(
    sel_id("myButton"), 
    backgroundColor = 'red', 
    fontSize = 20,
    color = grey
  )$
  change(
    sel_class("aClass"),
    color = grey
  )

# include in an app
library(shiny)

ui <- fluidPage(
  css$include(),
  h1("Some text", class = "aClass"),
  actionButton("myButton", "Am I red?", class = "aClass")
)

server <- function(input, output){
  output$myPlot <- renderPlot(plot(cars))
}

if(interactive())
 shinyApp(ui, server)

}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-define}{\code{Gaius$define()}}
\item \href{#method-change}{\code{Gaius$change()}}
\item \href{#method-build}{\code{Gaius$build()}}
\item \href{#method-print_css}{\code{Gaius$print_css()}}
\item \href{#method-include}{\code{Gaius$include()}}
\item \href{#method-print}{\code{Gaius$print()}}
\item \href{#method-clone}{\code{Gaius$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-define"></a>}}
\if{latex}{\out{\hypertarget{method-define}{}}}
\subsection{Method \code{define()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Gaius$define(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Named variables to define.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Define variables.
}

\subsection{Returns}{
Self: the \code{Gaius} object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{Gaius$new()$define(baseColor = "blue")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-change"></a>}}
\if{latex}{\out{\hypertarget{method-change}{}}}
\subsection{Method \code{change()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Gaius$change(selector, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{selector}}{An object of class \code{selector} as returned by the \verb{sel_*} family of functions.}

\item{\code{...}}{Declarations: properties and their values. This accepts
camelcase, e.g.: \code{font-style} or \code{fontStyle}.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Change
}

\subsection{Returns}{
Self: the \code{Gaius} object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{Gaius$new()$change(sel_id("myButton"), color = "blue", fontSize = 50)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-build"></a>}}
\if{latex}{\out{\hypertarget{method-build}{}}}
\subsection{Method \code{build()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Gaius$build()}\if{html}{\out{</div>}}
}

\subsection{Details}{
Builds CSS

Builds the CSS from definitions and changes.


Gaius$
new()$
define(primary_color = 'red')$
change(
sel_id("myButton"),
color = primary_color,
fontSize = 50
)$
change(
sel_class("container"),
backgroundColor = primary_color
)$
build()
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print_css"></a>}}
\if{latex}{\out{\hypertarget{method-print_css}{}}}
\subsection{Method \code{print_css()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Gaius$print_css()}\if{html}{\out{</div>}}
}

\subsection{Details}{
Prints Generated CSS
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{Gaius$new()$change(sel_id("myButton"), color = "blue")$print_css()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-include"></a>}}
\if{latex}{\out{\hypertarget{method-include}{}}}
\subsection{Method \code{include()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Gaius$include()}\if{html}{\out{</div>}}
}

\subsection{Details}{
Include in Shiny

Includes the CSS in shiny, place the call to this method anywhere in the shiny UI.
}

\subsection{Returns}{
\link[htmltools:builder]{htmltools::tags}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# generate CSS
css <- Gaius$
  new()$
  define(grey = '#c4c4c4')$
  change(
    sel_id("myButton"), 
    backgroundColor = 'red', 
    fontSize = 20,
    color = grey
  )$
  change(
    sel_class("aClass"),
    color = grey
  )

# include in an app
library(shiny)

ui <- fluidPage(
  css$include(),
  h1("Some text", class = "aClass"),
  actionButton("myButton", "Am I red?", class = "aClass")
)

server <- function(input, output){
  output$myPlot <- renderPlot(plot(cars))
}

if(interactive())
 shinyApp(ui, server)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Gaius$print()}\if{html}{\out{</div>}}
}

\subsection{Details}{
Print

Prints information on the Gaius object.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Gaius$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
